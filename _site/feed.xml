<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-09-03T21:26:14+08:00</updated><id>http://localhost:4000/</id><title type="html">小明的记录</title><subtitle>记录一些我自己会的东西，免得以后忘记了
</subtitle><entry><title type="html">状态机（一）</title><link href="http://localhost:4000/blog/update/2017/09/03/fsm_1.html" rel="alternate" type="text/html" title="状态机（一）" /><published>2017-09-03T21:21:57+08:00</published><updated>2017-09-03T21:21:57+08:00</updated><id>http://localhost:4000/blog/update/2017/09/03/fsm_1</id><content type="html" xml:base="http://localhost:4000/blog/update/2017/09/03/fsm_1.html">&lt;h1 id=&quot;简单有限状态机&quot;&gt;简单有限状态机&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;状态机，其实就是处理状态执行及状态转换的一种代码组织形式，几乎每个程序都有状态机的存在，只是很多状态机隐藏了起来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;状态（State）是针对某一块逻辑的一种生命周期管理方式。对于任何程序逻辑，我们都要能够确切的知道其创建/运行/销毁的整个过程，这个过程就叫生命周期。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最简单的状态接口的定义如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;public interface IState
{
    //生命周期的起点，创建
    void OnEnter(IManager manager);
    //生命周期的终点，销毁
    void OnExit(IManager manager);
    //状态的运行过程，运行
    void OnUpdate(IManager manager);  
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有了状态，我们还需要对状态进行管理，这样才形成一种状态之间的转换。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;public interface IManager
{
    //刷新
    void Update();
    //改变状态
    void ChangeState(IState state);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于一个最简单的Manager，只需要有一个死循环的Update和一个改变状态的接口就够了。对于Update来说，可以由外部的死循环来调用或者内部实现一个死循环来刷新IState。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;IManager是状态机的核心，IState对应的是具体逻辑的实现，所以下面主要讲解IManager的实现。&lt;/p&gt;

&lt;h1 id=&quot;同一时间只有一个状态的状态机&quot;&gt;同一时间只有一个状态的状态机&lt;/h1&gt;

&lt;p&gt;这种状态机通常应用于游戏主状态或者场景切换等。&lt;br /&gt;
按照不同的用途及实现方式，可以分为队列式状态机和堆栈式状态机。&lt;/p&gt;

&lt;h2 id=&quot;队列式状态机&quot;&gt;队列式状态机&lt;/h2&gt;
&lt;p&gt;队列式状态机一般有两种实现方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一种状态机，在Update中进行状态转换
    &lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;public class Manager
{
  private IState currentState;
  private IState newState;
  public void ChangeState(IState state)
  {
      newState = state;
  }
  public void Update()
  {
      //当前有状态的时候，刷新
      if (null != currentState)
      {
          currentState.OnUpdate(this);
      }
      //当前有新状态的时候，进行切换
      if (null != newState)
      {
          //先要退出原状态
          if (null != currentState)
          {
              currentState.OnExit(this);
              currentState = null;
          }
          newState.OnEnter(this);
          currentState = newState;
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;第二种状态机，在调用ChangeState的时候进行状态切换
    &lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;public class Manager
{
  private IState currentState;
  public void ChangeState(IState state)
  {
      //先要退出原状态
      if (null != currentState)
      {
          currentState.OnExit(this);
          currentState = null;
      }
      state.OnEnter(this);
      currentState = state;
  }
  public void Update()
  {
      //当前有状态的时候，刷新
      if (null != currentState)
      {
          currentState.OnUpdate(this);
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上是两种队列式状态机Manager的实现方式，各有利弊。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;第一种状态机，调用ChangeState的时候并不进行状态转换，而只是将新状态记录下来，等到Update的时候才进行状态转换。这种方式可以避免在一次循环过程中有多次ChangeState调用的情况下，调用多次OnEnter及OnExit造成的资源浪费。但依赖状态转换的代码则必须在确认状态转换之后才异步执行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第二种状态机，在调用ChangeState的时候直接进行状态转换，后续代码无需等待Update刷新即可立即明确当前状态是什么，有利于代码的顺序执行。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;/&lt;/th&gt;
      &lt;th&gt;第一种队列式状态机&lt;/th&gt;
      &lt;th&gt;第二种队列式状态机&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;即时性&lt;/td&gt;
      &lt;td&gt;状态延迟改变&lt;/td&gt;
      &lt;td&gt;状态立即改变&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;多次改变状态&lt;/td&gt;
      &lt;td&gt;只有当前循环的最后一次生效&lt;/td&gt;
      &lt;td&gt;每次生效&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;效率&lt;/td&gt;
      &lt;td&gt;高&lt;/td&gt;
      &lt;td&gt;低&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;使用&lt;/td&gt;
      &lt;td&gt;常用于场景切换等大量资源创建销毁的部分&lt;/td&gt;
      &lt;td&gt;常用于战斗等即时性较强的部分&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;堆栈式状态机&quot;&gt;堆栈式状态机&lt;/h2&gt;

&lt;p&gt;堆栈式状态机主要用于需要状态回溯的情况，比较典型的就是UI层级管理。Android的Activity的切换回溯使用的也是这种方法。&lt;br /&gt;
在这种状态机当中，通常会增加两个方法来处理状态的压栈弹栈。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;public interface IStackState
{
    void OnEnter(IStackManager manager);
    void OnExit(IStackManager manager);
    void OnUpdate(IStackManager manager);

    //当新状态入栈导致本状态失效时调用
    void OnPause(IStackManager manager);
    //当本状态其上状态出栈导致本状态回到栈顶的时候调用
    void OnResume(IStackManager manager);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同样的，Manager的接口也替换为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;public interface IStackManager
{
    //新状态入栈
    void Push(IStackState state);
    //栈顶状态出栈
    void Pop();
    void Update();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而Manager的实现方式也和队列式的不同，通常的实现方式如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;public class StackManager
{
    private Stack stateStack;
    public void Push(IStackState state)
    {
        //获取当前栈顶状态，Pause
        IStackState currentTop = stateStack.GetTop();
        if (null != currentTop)
        {
            currentTop.OnPause(this);
        }
        //新状态Enter
        state.OnEnter(this);
        //新状态入栈
        stateStack.Push(state);
    }
    public void Pop()
    {
        //获取栈顶状态，弹出并销毁
        IStackState currentTop = stateStack.GetTop();
        if (null == currentTop)
        {
            return;
        }
        //栈顶状态Exit
        currentTop.OnExit(this);
        //栈顶状态出栈
        stateStack.Pop();
        //获取新的栈顶元素，Resume
        currentTop = stateStack.GetTop();
        if (null != currentTop)
        {
            currentTop.OnResume(this);
        }
    }
    public void Update()
    {
        //只刷新栈顶状态
        IStackState currentTop = stateStack.GetTop();
        if (null != currentTop)
        {
            currentTop.OnUpdate(this);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;同一时间有多个状态并行的状态机&quot;&gt;同一时间有多个状态并行的状态机&lt;/h1&gt;

&lt;p&gt;很多时候并不会只有一个状态在执行，比如一个游戏角色，在战斗中可能会同时存在移动状态以及攻击状态，也就是边移动边攻击，这个时候就需要使用并行状态机。&lt;br /&gt;
在这种状态机当中，除了显式的通过代码来退出某个状态外，也会使用诸如表格等方式来声明状态之间的替换规则。例如：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;本表格第一行标记的是新状态，第一列表示的是当前已存在的状态&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;/&lt;/th&gt;
      &lt;th&gt;待机&lt;/th&gt;
      &lt;th&gt;移动&lt;/th&gt;
      &lt;th&gt;攻击&lt;/th&gt;
      &lt;th&gt;受击&lt;/th&gt;
      &lt;th&gt;死亡&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;待机&lt;/td&gt;
      &lt;td&gt;无效&lt;/td&gt;
      &lt;td&gt;替换&lt;/td&gt;
      &lt;td&gt;替换&lt;/td&gt;
      &lt;td&gt;替换&lt;/td&gt;
      &lt;td&gt;替换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;移动&lt;/td&gt;
      &lt;td&gt;替换&lt;/td&gt;
      &lt;td&gt;无效&lt;/td&gt;
      &lt;td&gt;共存&lt;/td&gt;
      &lt;td&gt;替换&lt;/td&gt;
      &lt;td&gt;替换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;攻击&lt;/td&gt;
      &lt;td&gt;替换&lt;/td&gt;
      &lt;td&gt;共存&lt;/td&gt;
      &lt;td&gt;替换&lt;/td&gt;
      &lt;td&gt;替换&lt;/td&gt;
      &lt;td&gt;替换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;受击&lt;/td&gt;
      &lt;td&gt;无效&lt;/td&gt;
      &lt;td&gt;无效&lt;/td&gt;
      &lt;td&gt;无效&lt;/td&gt;
      &lt;td&gt;替换&lt;/td&gt;
      &lt;td&gt;替换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;死亡&lt;/td&gt;
      &lt;td&gt;无效&lt;/td&gt;
      &lt;td&gt;无效&lt;/td&gt;
      &lt;td&gt;无效&lt;/td&gt;
      &lt;td&gt;无效&lt;/td&gt;
      &lt;td&gt;无效&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;例1：当前处于待机状态，角色被攻击产生受击状态，则查询受击列待机行，得到“替换”，则受击状态替换掉待机状态。&lt;br /&gt;
例2：当前处于移动状态，角色攻击其他目标，则查询攻击列移动行，得到“共存”，则移动状态不变，增加攻击状态。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;public interface IMultipleState
{
    void OnEnter(IMultipleManager manager);
    void OnExit(IMultipleManager manager);
    void OnUpdate(IMultipleManager manager);

    //判断状态是否可用
    void IsEnable();
    //被打断时调用，通常在这里会将状态置为不可用（IsEnable()为false）
    void OnInterupt(IMultipleManager manager, IMultipleState state);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;状态接口比最基本的状态多了一个被打断(OnInterupt)，来处理状态之间相互替换关系，以及一个是否可用的判断，用来检测当前状态是否应该被移除。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;public interface IMultipleManager
{
    void RunState(IMultipleState state);
    void Update();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;Manager的接口变为执行状态，实现中需要处理状态关系，所以需要添加一个查询状态关系的辅助工具&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;//状态关系
public enum ENRelation
{
    //无效
    enNone,
    //替换
    enReplace,
    //共存
    enCompatible,   
};
public interface IRelationManager
{
    //检测两个状态的关系
    ENRelation CheckRelation(IMultipleState newState, IMultipleState oldState);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;通过IRelationManager来判定状态之间的关系&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对应的Manager的实现为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;public class MultipleManager
{
    private List stateList;
    private IRelationManager relationManager;
    public void RunState(IMultipleState newState)
    {
        //遍历当前列表中的所有状态，获取新状态与当前所有状态的关系
        foreach(IMultipleState oldState in stateList)
        {
            if (!oldState.IsEnable())
            {
                continue;
            }
            ENRelation relation = relationManager.CheckRelation(newState, oldState);
            switch (relation)
            {
                case ENRelation.enNone:
                    //新状态无法添加，返回
                    return;
                    break;
                case ENRelation.enReplace:
                    //新状态替换旧状态
                    oldState.OnInterupt(this, newState);
                    break;
                case ENRelation.enCompatible:
                    //新旧状态可以共存，进入下一循环
                    break;
                default:
                    break;
            }
        }
        newState.OnEnter(this);
        stateList.Add(newState);
    }
    public void Update()
    {
        foreach(IMultipleState state in stateList)
        {
            //状态无效则退出
            if (!state.IsEnable())
            {
                state.OnExit(this);
            }
            else
            {
                state.OnUpdate(this);
            }
        }
        //移除所有无效状态
        stateList.RemoveAll(state =&amp;gt; !state.IsEnable());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;这里的Manager实现相对比较复杂，主要是需要判断状态之间的关系及状态可用性&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">简单有限状态机</summary></entry><entry><title type="html">欢迎</title><link href="http://localhost:4000/blog/update/2017/08/27/welcome-to-jekyll.html" rel="alternate" type="text/html" title="欢迎" /><published>2017-08-27T20:31:57+08:00</published><updated>2017-08-27T20:31:57+08:00</updated><id>http://localhost:4000/blog/update/2017/08/27/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/blog/update/2017/08/27/welcome-to-jekyll.html">&lt;p&gt;初始化一个blog，我很懒，可能更新不了什么东西。&lt;/p&gt;</content><author><name></name></author><summary type="html">初始化一个blog，我很懒，可能更新不了什么东西。</summary></entry></feed>